<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="SuccessfulAuthentication" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SuccessfulAuthentication.html;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;windows-1251</value>
  </data>
  <data name="GetIssuesMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/quality-issues</value>
    <comment>Retrieves information about all the BIM 360 issues in a project, including details about their associated comments and attachments</comment>
  </data>
  <data name="GetNGIssueTypesMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/ng-issue-types?include=subtypes</value>
    <comment>Retrieves a list of supported issue types (e.g., quality and safety) and issue subtypes (e.g., work to complete and pre-punch list) that you can allocate to an issue</comment>
  </data>
  <data name="PatchIssuesMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/quality-issues/{1}</value>
    <comment>Updates a BIM 360 issue</comment>
  </data>
  <data name="PostIssuesAttachmentsMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/attachments</value>
    <comment>Adds a BIM 360 Document Management file to a BIM 360 issue</comment>
  </data>
  <data name="PostIssuesMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/quality-issues</value>
    <comment>Adds a BIM 360 issue to a project</comment>
  </data>
  <data name="GetHubsMethod" xml:space="preserve">
    <value>/project/v1/hubs</value>
    <comment>Returns a collection of accessible hubs for the user</comment>
  </data>
  <data name="GetHubsInfoByIdMethod" xml:space="preserve">
    <value>/project/v1/hubs/{0}</value>
    <comment>Returns data on a specific hub_id</comment>
  </data>
  <data name="PutBucketsObjectsMethod" xml:space="preserve">
    <value>/oss/v2/buckets/{0}/objects/{1}</value>
    <comment>Upload an object. If the specified object name already exists in the bucket, the uploaded content will overwrite the existing content for the bucket name/object name combination.</comment>
  </data>
  <data name="PutBucketsObjectsResumableMethod" xml:space="preserve">
    <value>/oss/v2/buckets/{0}/objects/{1}/resumable</value>
    <comment>This endpoint allows resumable uploads for large files in chunks.</comment>
  </data>
  <data name="GetProjectsOfHubMethod" xml:space="preserve">
    <value>/project/v1/hubs/{0}/projects</value>
    <comment>Returns a collection of projects for a given hub_id</comment>
  </data>
  <data name="GetProjectOfHubMethod" xml:space="preserve">
    <value>/project/v1/hubs/{0}/projects/{1}</value>
    <comment>Returns a project for a given project_id</comment>
  </data>
  <data name="GetProjectsDownloadInfoMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/downloads/{1}</value>
    <comment>Returns the details for a specific download</comment>
  </data>
  <data name="GetProjectsHubMethod" xml:space="preserve">
    <value>/project/v1/hubs/{0}/projects/{1}/hub</value>
    <comment>Returns the hub for a given project_id</comment>
  </data>
  <data name="GetTopFoldersMethod" xml:space="preserve">
    <value>/project/v1/hubs/{0}/projects/{1}/topFolders</value>
    <comment>Returns the details of the highest level folders the user has access to for a given project</comment>
  </data>
  <data name="GetProjectsFoldersContentsMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/folders/{1}/contents</value>
    <comment>Returns a collection of items and folders within a folder</comment>
  </data>
  <data name="GetProjectsFoldersSearchMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/folders/{1}/search</value>
    <comment>Filters the data of a folder and recursively in the subfolders of any project accessible to you, using the filter query string parameter</comment>
  </data>
  <data name="PostProjectsItemsMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/items</value>
    <comment>Creates versions of uploaded files (items) and makes copies of existing files</comment>
  </data>
  <data name="PostProjectStorageMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/storage</value>
    <comment>Creates a storage location in the OSS where data can be uploaded to</comment>
  </data>
  <data name="PostProjectsVersionMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/versions</value>
    <comment>Creates new versions of a file (item)</comment>
  </data>
  <data name="PostGetTokenMethod" xml:space="preserve">
    <value>/authentication/v1/gettoken</value>
    <comment>Exchange an authorization code extracted from a GET authorize callback for a three-legged access token</comment>
  </data>
  <data name="PostRefreshTokenMethod" xml:space="preserve">
    <value>/authentication/v1/refreshtoken</value>
    <comment>Acquire a new access token by using the refresh token provided by the POST gettoken endpoint</comment>
  </data>
  <data name="GetAuthorizeMethod" xml:space="preserve">
    <value>/authentication/v1/authorize?response_type=code&amp;client_id={0}&amp;redirect_uri={1}&amp;scope={2}</value>
    <comment>This is the browser URL to redirect an end user to in order to acquire the user’s consent for your app to access the specified resources</comment>
  </data>
  <data name="GetBucketDetailsMethod" xml:space="preserve">
    <value>/oss/v2/buckets/{0}/details</value>
    <comment>Return bucket details in JSON format if the caller is the owner of the bucket</comment>
  </data>
  <data name="GetBucketsMethod" xml:space="preserve">
    <value>/oss/v2/buckets</value>
    <comment>Returns the buckets owned by the application</comment>
  </data>
  <data name="GetBucketsObjectMethod" xml:space="preserve">
    <value>/oss/v2/buckets/{0}/objects/{1}</value>
    <comment>Download an object</comment>
  </data>
  <data name="PostBucketsMethod" xml:space="preserve">
    <value>/oss/v2/buckets</value>
    <comment>Creates a bucket</comment>
  </data>
  <data name="GetCheckFolderPermissionsMethod" xml:space="preserve">
    <value>/bim360/docs/v1/projects/{0}/folders/{1}/permissions</value>
    <comment>Retrieves information about the permissions assigned to users, roles and companies for a BIM 360 Document Management folder, including details about the name and the status</comment>
  </data>
  <data name="DeleteBucketsObjectMethod" xml:space="preserve">
    <value>/oss/v2/buckets/{0}/objects/{1}</value>
    <comment>Deletes an object from the bucket</comment>
  </data>
  <data name="GetIssueMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/quality-issues/{1}</value>
    <comment>Retrieves detailed information about a single BIM 360 issue</comment>
  </data>
  <data name="GetIssuesAttachmentMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/quality-issues/{1}/attachments</value>
    <comment>Retrieves information about all the attachments associated with a specific BIM 360 issue in a project</comment>
  </data>
  <data name="GetProjectsItemMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/items/{1}</value>
    <comment>Retrieves metadata for a specified item. Items represent word documents, fusion design files, drawings, spreadsheets, etc.</comment>
  </data>
  <data name="GetUsersMeMethod" xml:space="preserve">
    <value>/userprofile/v1/users/@me</value>
    <comment>Get the profile information of an authorizing end user in a three-legged context</comment>
  </data>
  <data name="GetProjectsItemsVersionsMethod" xml:space="preserve">
    <value>/data/v1/projects/{0}/items/{1}/versions</value>
    <comment>Returns versions for the given item. Multiple versions of a resource item can be uploaded in a project.</comment>
  </data>
  <data name="MrsFileName" xml:space="preserve">
    <value>.mrs</value>
    <comment>The indicator file that defines the folder for uploading.</comment>
  </data>
  <data name="GetRootCausesMethod" xml:space="preserve">
    <value>/issues/v1/containers/{0}/root-causes</value>
    <comment>Retrieves a list of supported root causes that you can allocate to an issue. For example, communication and coordination.</comment>
  </data>
  <data name="PostAuthenticateMethod" xml:space="preserve">
    <value>/authentication/v1/authenticate</value>
    <comment>Get a two-legged access token by providing your app’s client ID and secret.</comment>
  </data>
</root>