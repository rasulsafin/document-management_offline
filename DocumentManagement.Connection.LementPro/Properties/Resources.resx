<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MethodAuthenticationLogin" xml:space="preserve">
    <value>/Services/Authentication/Login.do</value>
    <comment>Method to log in</comment>
  </data>
  <data name="MethodBimChildrenByAttribute" xml:space="preserve">
    <value>/Services/Bim/GetChildObjectsByAttribute.do</value>
    <comment>Method to get childern for BIM file by attribute</comment>
  </data>
  <data name="MethodBimGetListViewObjectAttributes" xml:space="preserve">
    <value>/Services/Bim/GetListViewObjectAttributes.do</value>
    <comment>Method to get BIM's attributes</comment>
  </data>
  <data name="MethodCategoriesGetMenuList" xml:space="preserve">
    <value>/Services/Category/GetMenuCategories.do</value>
    <comment>Method to get all menu categories</comment>
  </data>
  <data name="MethodFileDownload" xml:space="preserve">
    <value>/Services/Files/DocumentFile/GetFile.do</value>
    <comment>Method to download the file</comment>
  </data>
  <data name="MethodFolderGetListForCategory" xml:space="preserve">
    <value>/Services/Folders/{0}Folder/GetTree.do</value>
    <comment>Method to get all folders of the native category</comment>
  </data>
  <data name="MethodGetObjectsList" xml:space="preserve">
    <value>/Services/{0}/GetList.do</value>
    <comment>Method to get list of objects from folder</comment>
  </data>
  <data name="MethodObjectArchive" xml:space="preserve">
    <value>/Services/ObjectBase/Archive.do</value>
    <comment>Method to archive (close) an object</comment>
  </data>
  <data name="MethodObjectCreate" xml:space="preserve">
    <value>/Services/ObjectBase/Create.do</value>
    <comment>Method to create an object</comment>
  </data>
  <data name="MethodObjectDelete" xml:space="preserve">
    <value>/Services/ObjectBase/Delete.do</value>
    <comment>Method to delete the object</comment>
  </data>
  <data name="MethodObjectFileAdd" xml:space="preserve">
    <value>/Services/ObjectsBase/File/Add.do</value>
    <comment>Method to upload file (less than 2 MB)</comment>
  </data>
  <data name="MethodObjectFileBeginUpload" xml:space="preserve">
    <value>/Services/ObjectsBase/File/BeginUpload.do</value>
    <comment>Method to begin upload large (more than 2 mb) file</comment>
  </data>
  <data name="MethodObjectFileEndUpload" xml:space="preserve">
    <value>/Services/ObjectsBase/File/EndUpload.do</value>
    <comment>Method to end upload</comment>
  </data>
  <data name="MethodObjectFileUploadPart" xml:space="preserve">
    <value>/Services/ObjectsBase/File/UploadPart.do</value>
    <comment>Method to continue or end uploading large file</comment>
  </data>
  <data name="MethodObjectGet" xml:space="preserve">
    <value>/Services/ObjectBase/Get.do</value>
    <comment>Method to get object info</comment>
  </data>
  <data name="MethodObjectGetDefaultTemplate" xml:space="preserve">
    <value>/Services/ObjectsBase/Template/GetDefaultTemplate.do</value>
    <comment>Method to get default template</comment>
  </data>
  <data name="MethodTaskUpdate" xml:space="preserve">
    <value>/Services/Task/Edit.do</value>
    <comment>Method to edit (update) a task</comment>
  </data>
  <data name="MethodTypesGetAttributesDefinition" xml:space="preserve">
    <value>/Services/ObjectTypes/ObjectTypeAttributeDef/GetList.do</value>
    <comment>Method to get all type's attributes definitions</comment>
  </data>
  <data name="MethodTypesGetTree" xml:space="preserve">
    <value>/Services/ObjectTypes/ObjectType/GetTree.do</value>
    <comment>Method to get all possible types</comment>
  </data>
  <data name="UrlCategoryBim" xml:space="preserve">
    <value>/Bim</value>
    <comment>BIM category URL</comment>
  </data>
  <data name="UrlCategoryDictionaries" xml:space="preserve">
    <value>/Dictionaries</value>
    <comment>Dictionaries category URL</comment>
  </data>
  <data name="UrlCategoryDocuments" xml:space="preserve">
    <value>/Documents</value>
    <comment>Documents category URL</comment>
  </data>
  <data name="UrlCategoryGoals" xml:space="preserve">
    <value>/Goals</value>
    <comment>Goals category URL</comment>
  </data>
  <data name="UrlCategoryProjects" xml:space="preserve">
    <value>/Projects</value>
    <comment>Projects category URL</comment>
  </data>
  <data name="UrlCategoryTasks" xml:space="preserve">
    <value>/Tasks</value>
    <comment>Tasks category URL</comment>
  </data>
  <data name="UrlCustomCategoryDefects" xml:space="preserve">
    <value>/Categories/Defects</value>
    <comment>Defects custom category URL</comment>
  </data>
  <data name="UrlServer" xml:space="preserve">
    <value>https://briogroup.lement.pro</value>
    <comment>Host URL of the Lement Pro server</comment>
  </data>
</root>